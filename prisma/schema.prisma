// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GameStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProgrammingLanguage {
  JAVASCRIPT
  TYPESCRIPT
  PYTHON
  JAVA
  CSHARP
}

enum GameDifficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  username          String              @unique
  password          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  stripeCustomerId  String?
  preferredLanguage ProgrammingLanguage @default(TYPESCRIPT)
  participatedGames GameParticipant[]
}

model Game {
  id           String            @id @default(uuid())
  challenge    CodeChallenge     @relation(fields: [challengeId], references: [id])
  challengeId  String
  startsAt     DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  participants GameParticipant[]
  status       GameStatus        @default(PENDING)
}

model GameParticipant {
  id          String              @id @default(uuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  game        Game                @relation(fields: [gameId], references: [id])
  gameId      String
  user        User                @relation(fields: [userId], references: [id])
  userId      String
  currentCode String?
  language    ProgrammingLanguage @default(TYPESCRIPT)
  isCompleted Boolean             @default(false)
  completedAt DateTime?
  isHost      Boolean             @default(false)

  @@unique([gameId, userId])
}

model CodeChallenge {
  id          String         @id @default(uuid())
  title       String
  description String
  difficulty  GameDifficulty
  testCases   Json // Store test cases as JSON
  starterCode String // Initial code template
  solution    String // Reference solution
  games       Game[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}
